[[./img/blorg.png]]

... a static site generator using [[http://orgmode.org/][Org Mode]] files as markup.

~~Work in progress.~~  Protective eyewear required.

* Goals

- To provide a Jekyll-like workflow (edit markup files, have them
  automatically processed into HTML),
- using Org Mode as the markup language,
- using Hiccup for templating, and
- supporting all of
  - my art- and image-heavy pages and image galleries;
  - my math- and code-heavy software posts;
  - my narrative-heavy South Pole blog posts.

* Motivation
** Why Org Mode?

I really like writing in [[http://orgmode.org/][Org Mode]] (a text editing / outlining / To
Do-list processing / scheduling / literate programming / ... mode for
[[http://www.gnu.org/software/emacs/][Emacs]]).  The outliner gets out of my way most of the time and lets me
move ideas around while they are being formed, and lets me hide the
portions that I'm not focusing on at any given time.  I can export to
a fairly nice looking PDF document in a few keystrokes.  I also use
the literate programming and LaTeX / math support just about every
day.

** Why not /just/ Org Mode?

*I.e., why a Clojure app?*  I find the export tools available for Org
Mode are not quite powerful (or fast) enough for a large blog.  I got
pretty far trying to get the export features to suit, but not far
enough -- generation of a large site took too long, and customization
was too unweildy.  In general I much prefer developing software in
[[http://clojure.org][Clojure]] than in Emacs Lisp (though admittedly I'm less experienced
with the latter).

** Why not Jekyll?

I used Jekyll for a few years and was somewhat satisfied by it.  But
it doesn't support Org Mode, and I am simply not that fond of Ruby and
its related ecosystems.  Also I have a number of customizations
relating to handling images that I'm unlikely to easily get working
with Jekyll.

* Installing

It's not on Clojars (yet).  Check out the project and run it with
=lein run=.  The program parses any Org Mode files in the source
directory and publishes them in the destination directory
(=/tmp/blorg=). At the moment the source and destination directories
are hardcoded, so you'll have to change them in the code.  (That will
obviously change soon.)

* Running tests

The parser has a few dozen tests.  Run them with =lein spec= or =lein spec -a=.

* Work Done / To Do

This is a recently-started project and not yet feature-complete.  See
[[https://github.com/eigenhombre/blorg/issues][pending issues]], or [[https://github.com/eigenhombre/blorg/issues?q=is%3Aissue+is%3Aclosed][completed issues]].

* License

Copyright (c) 2015 John Jacobsen.  MIT license.

* Disclaimer

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
